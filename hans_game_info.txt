directions: x, y     ; x > 0 => right, y > 0 => down
velocity = vel
acceleration = acc
player,  0: hans, 1: david, 2: thomas, 3: jaran ...
minion/boss,  0: david, 1: thomas, 2: jaran ...

sprite groops:
    wind
    mobs
    boss
    player





basic setup:


    import pygame
    import time
    class Main():
        def __init__(self):
            pygame.init()

            self.WIDTH = 900
            self.HEIGHT = 500

            self.screen = pygame.display.set_mode((self.WIDTH, self.HEIGHT))
            self.clock = pygame.time.Clock()


            

        def loop(self):
            running = True
            previous_time = time.time()
            while running:
                self.dt = time.time()-previous_time
                previous_time = time.time()
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        running = False
                self.screen.fill((200, 200, 200))




                pygame.display.update()
                pygame.display.flip()
                self.clock.tick(60)


    if __name__ == "__main__":
        runn = Main()
        runn.loop()




Når eg skal legge til lyd
    def main(filepath):
    pygame.mixer.init()

    # If you want more channels, change 8 to a desired number. 8 is the default number of channel

    pygame.mixer.set_num_channels(8)

    # This is the sound channel
    voice = pygame.mixer.Channel(5)

    sound = pygame.mixer.Sound(filepath)

    voice.play(sound)

    if voice.get_busy():
        #Do Something




Når eg skal få informasjon som tekst
    import pygame as pg
    def main():
        screen = pg.display.set_mode((640, 480))
        font = pg.font.Font(None, 32)
        clock = pg.time.Clock()
        input_box = pg.Rect(100, 100, 140, 32)
        color_inactive = pg.Color('lightskyblue3')
        color_active = pg.Color('dodgerblue2')
        color = color_inactive
        active = False
        text = ''
        done = False

        while not done:
            for event in pg.event.get():
                if event.type == pg.QUIT:
                    done = True
                if event.type == pg.MOUSEBUTTONDOWN:
                    # If the user clicked on the input_box rect.
                    if input_box.collidepoint(event.pos):
                        # Toggle the active variable.
                        active = not active
                    else:
                        active = False
                    # Change the current color of the input box.
                    color = color_active if active else color_inactive
                if event.type == pg.KEYDOWN:
                    if active:
                        if event.key == pg.K_RETURN:
                            print(text)
                            text = ''
                        elif event.key == pg.K_BACKSPACE:
                            text = text[:-1]
                        else:
                            text += event.unicode

            screen.fill((30, 30, 30))
            # Render the current text.
            txt_surface = font.render(text, True, color)
            # Resize the box if the text is too long.
            width = max(200, txt_surface.get_width()+10)
            input_box.w = width
            # Blit the text.
            screen.blit(txt_surface, (input_box.x+5, input_box.y+5))
            # Blit the input_box rect.
            pg.draw.rect(screen, color, input_box, 2)

            pg.display.flip()
            clock.tick(30)
    if __name__ == '__main__':
        pg.init()
        main()
        pg.quit()